{"posts":[{"title":"常用的MarkDown語法","text":"這篇文章在聊什麼： 常用markdownm語法整理 常用markdown語法 語法 說明 示例 渲染效果 # 標題 1 # 標題 1 # 標題 1 ## 標題 2 ## 標題 2 ## 標題 2 ### 標題 3 ### 標題 3 ### 標題 3 **bold** 粗體 **粗體** 粗體 *italic* 斜體 *斜體* 斜體 ~~strikethrough~~ 刪除線 ~~刪除線~~ 刪除線 &gt; 引言 &gt;這是引言 &gt;這是引言 * 或 - 無序列表 - 項目 1- 項目 2 - 項目 1- 項目 2 1. 有序列表 1. 項目 12. 項目 2 1. 項目 12. 項目 2 [連結文字](URL) 超連結 [GitHub](https://github.com) GitHub ![圖片描述](URL) 圖片 ![alt text](https://example.com/image.png) `inline code` 行內程式碼 `inline code` inline code ```code``` 程式碼區塊 ```code``` code 1.程式碼區塊（Code Block）程式碼區塊用三個反引號（```）包裹，並且可以指定語言來啟用語法高亮。這種方式支持語法高亮顯示和語言標識符。 zsh123456789-----語法-----# ```語法高亮 語言標示符# 程式碼內容# ```-----示例-----```zsh zshecho &quot;Hello, World!&quot;```. zsh1echo &quot;Hello, World!&quot;","link":"/learning/markdown/"},{"title":"免費、容易上手、高度可定制：使用Github Pages和Hexo創建個人部落格的5大優點","text":"這篇文章在聊什麼： 為什麼會想創部落格？ 為什麼使用Github Pages + Hexo？ 創部落格的理由想要有系統地分享文字、圖片與程式碼，是我創部落格的主要原因。 自從2022年底chatGPT(點我)推出後，學習變得相對容易，其中最讓我有感的是語言，無論是人類語言或程式語言都是，這讓我很興奮地陸續分享了幾篇在Facebook與Instagram上，但內容一長閱讀起來就變得很不方便，尤其涉及程式碼的時候更是如此。 想起自己覺得不錯的程式教學文章大多是以部落格的形式呈現，因此讓我有了創建部落格的念頭。多虧了chatGPT，讓我在實作上遇到的問題都獲得很好的指引或解釋，有機會後續再另闢篇幅說明。 使用Github Pages和Hexo的5個優點 免費 - 使用 Github Pages 創建部落格是免費的，不需要花費額外的費用來購買網域和網站主機，這對於個人和小型團體來說非常實惠。 容易上手 - Hexo 是一個靜態網站產生器，它可以幫助你快速創建部落格並且具有豐富的主題和插件，這些都可以幫助你快速上手並創建出高質量的部落格。 安全可靠 - Github Pages 是由 Github 提供的靜態網站服務，它具有優秀的安全性和穩定性，可以保護你的部落格免受惡意攻擊和崩潰等問題的影響。 容易維護 - 使用 Hexo 創建部落格可以使你更輕鬆地進行部落格維護和更新，它具有自動化的功能，例如生成靜態頁面和部署更新，這可以使你的部落格維護變得更加容易。 高度可定制 - Hexo 具有豐富的主題和插件，這可以使你的部落格擁有獨特的風格和功能，同時你也可以自己創建自己的主題和插件來實現更多的定制化需求。 下篇我們再來聊聊什麼是Github Pages和Hexo吧！","link":"/learning/5-advantages-of-using-Github-Pages-and-Hexo-to-create-a-personal-blog/"},{"title":"建立免費靜態網站：不懂程式也能理解的GitHub Pages與Hexo介紹","text":"這篇文章在聊什麼： Github、Github Pages、Hexo是什麼？ 程式碼管理平台與一般的雲端硬碟有什麼差異？ 靜態網站建立平台和生成器的區別？ 介紹：Github｜Github Pages｜Hexo GitHub：程式碼管理平台允許開發者在上面儲存和分享程式碼。 GitHub Pages：靜態網站建立平台它是GitHub的一個功能，允許使用者在上面建立和管理靜態網站，並可以免費使用自己的網域名稱。 Hexo：靜態網站生成器基於Node.js開發的網誌框架，可以讓使用者快速製作自己的靜態網站。它使用Markdown語法來編寫內容，並且支援多種主題和插件，使用者可自由發揮並輕鬆地部署到GitHub Pages上。 Q：Github跟雲端硬碟有什麼不同呢？不是都能存放檔案和分享嗎？GitHub與一般的雲端硬碟的差異在於： 它專注於程式碼的版本管理和協作，並提供許多開發者工具和社群功能。 可作為一個程式碼庫，開發者可以在上面尋找和使用開源項目，並與其他開發者進行合作。 打個比方，word和excel都能記帳，但因為excel對於相關功能的特化，使得它更適合這樣的工作場景。 因此GitHub相較於雲端硬碟，更適合開發人員和程式開發專案的管理。 Q：靜態網站建立平台和生成器有什麼差別？要說明兩者間的關係，可以這樣比喻： 靜態網站平台就像是一個展示空間，而靜態網站生成器就像是一位室內設計師。室內設計師可以根據展示空間的大小和形狀，以及客戶的需求和風格，設計出一個獨特的佈局和風格。同樣地，靜態網站生成器可以根據使用者的需求和設計，生成一個獨特的靜態網站，而靜態網站平台則提供了展示這個網站的場所和相應的工具和功能。","link":"/learning/Creating-a-Free-Static-Website-Understanding-GitHub-Pages-and-Hexo/"},{"title":"GPT-4 可能已經具備進階的心智能力？來聊聊 Sally–Anne test","text":"這篇文章在聊什麼： 心智理論 Theory of Mind (ToM) Sally–Anne test GPT-4 的實驗方式與通過測試的意義 心智理論 Theory of Mind (ToM)心智理論 (點我看維基百科) 心理學術語，是一種能夠理解自己以及周圍人類的心理狀態的能力。心智理論被稱為是一種理論，是因為至今我們仍無法直接觀察到心智。心智理論假設人類先天就能夠以類推方式，假定其他人擁有與自己類似的心智，並根據這個假設來觀察周圍，作出合乎社會期望的反應與行動。 Sally–Anne testSally–Anne test (點我看維基百科) Sally-Anne實驗是一個用來測試兒童理解他人心智的實驗。在這個實驗中，研究者會讓兒童觀看一個故事：Sally拿著一個球，把球放在籃子裡，然後離開場地。接著，Anne把球從籃子裡拿出來，放進了盒子裡，然後也離開了場地。最後，研究者問兒童，Sally回來後會把球放在哪裡？如果兒童回答Sally會把球放在盒子裡，則表明他們無法理解他人的信念和思維，反之，如果兒童回答Sally會把球放在籃子裡，則表明他們理解到了他人的信念和思維。這個實驗的目的是測試兒童是否能夠理解到他人可能持有一個不同於自己的信念和思維狀態，即是否能夠理解到他人的心智狀態。這個實驗可以瞭解兒童的心智理解的發展階段性，通常在3-4歲左右，兒童開始理解到他人的信念和思維，並且能夠將其用於預測他人的行為和理解他人的情感狀態。 GPT-4 的實驗方式與通過測試的意義 微軟的研究員特地把這個經典的測試內容改寫成一個現代版本（故事變成 Alice 和 Bob 在找一份電腦檔案），為的是避免GPT-4是因為之前記住了網路上關於 Sally-Anne測試的內容答案而通過測試。結果通過了！或許有些人因此開始擔憂起來，各種電影情節飛快在腦海中上演，AI會不會背叛人類…等，但實際上該實驗與原先的測試真的相同嗎？於是我向基於GPT-4的ChatGPT(Mar 14 Version)，詢問了另一個心理學實驗Baby Cry Experiment，向它描述了我的疑問： ChatGPT的主要訓練方法是基於無標注文本語料庫的非監督式學習，但通過引入人類專家的監督，如標註數據或標籤，能提高其情感理解能力。對於GPT-4通過Sally–Anne test一事，我認為僅能展現GPT-4具有良好的閱讀能力，它能理解文本的情境並根據邏輯做出正確判斷，但與人類版本的Sally–Anne test還是有不同之處。舉個例子，大家可以回想一下，我們可能都曾經歷過以下情境：小時候玩捉迷藏結果被拐出聲、說謊時眼神各種閃躲飄移…捉迷藏的狀況顯示當時尚未理解出聲造成的後果，但說謊時的眼神飄移是因為不理解可能的後果嗎？剛好相反，說謊產生的生理反應正是理解對方可能有的負面觀感，但因為緊張而讓自己無法按預期行動。這過程顯示人類的行為不只基於理解能力，還有其他如自我控制能力。 GPT-4可能已經具備進階的心智能力？ 我認為確實已具備進階的心智能力(話語理解)，但距離人類還有一段差距。這差距源自於chatGPT的訓練資料僅有公開的文本，而人類對於情感理解的豐富程度，則是源自經驗中透過視覺、聽覺甚至觸覺等觀察的積累。但隨著GPT-4現有的多模態(multimodal)能力，除了文字外亦有圖片識別功能，或許未來隨著聽覺訊息、嗅覺訊息、觸覺訊息等導入，又將蛻變成另一種嶄新的型態。 你們怎麼想呢？","link":"/life/Sally-Anne-test/"},{"title":"如何使用Hexo創建前後圖片滑動比較效果 - Before &amp; After Image Slider","text":"這篇文章在聊什麼： 介紹好用的Before/After圖片滑動工具 使用流程講解 前言2022年在做資策會期末專題時，為了實現這功能，最初是先找到了JQuery Plugin - TwentyTwenty，直到最近在思考能否轉成Hexo的樣式時，忽然轉念搜尋起”hexo twentytwenty”，果然有好心的日本網友將它移植到了Hexo的Plugins倉庫中，於是才有了這篇文章的誕生。 工具介紹：TwentyTwenty function rcc58(){ if(typeof($) != \"undefined\"){ (function(d){ var jsf = [\"/js/twentytwenty.js\",\"https://cdnjs.cloudflare.com/ajax/libs/mhayes-twentytwenty/1.0.0/js/jquery.twentytwenty.min.js\",\"https://cdnjs.cloudflare.com/ajax/libs/mhayes-twentytwenty/1.0.0/js/jquery.event.move.min.js\"]; var cssf = [\"https://cdnjs.cloudflare.com/ajax/libs/mhayes-twentytwenty/1.0.0/css/twentytwenty.min.css\"]; var i = 0; for(i=0; i","link":"/learning/before-after-image-slider/"},{"title":"簡易GUI計算機(chatGPT生成)","text":"C 1 2 3 + 4 5 6 - 7 8 9 * / 0 = function appendToDisplay(value) { document.getElementById('display').value += value; } function clearDisplay() { document.getElementById('display').value = ''; } function calculateResult() { try { document.getElementById('display').value = eval(document.getElementById('display').value); } catch (e) { document.getElementById('display').value = 'Error'; } } #calculator { display: grid; grid-template-columns: repeat(4, 1fr); gap: 5px; max-width: 200px; } #calculator button { padding: 10px; font-size: 18px; cursor: pointer; } #display { grid-column: span 4; padding: 10px; font-size: 24px; text-align: right; }","link":"/uncategorized/%E5%B0%8F%E5%B7%A5%E5%85%B7%E6%B8%AC%E8%A9%A6/"},{"title":"「靜態網站」與「動態網站」","text":"這篇文章在聊什麼 說明何謂靜態與動態網站 用問答方式來確認是否真的了解 靜態網站與動態網站的差異 特徵 靜態網站 動態網站 內容 由固定的 HTML、CSS 和 JavaScript 文件組成。 由伺服器端生成的內容組成，根據用戶請求生成。 生成方式 頁面內容在伺服器上是靜態的。 頁面內容在伺服器端動態生成。 數據處理 沒有伺服器端數據處理或業務邏輯。 伺服器端處理數據和業務邏輯，與數據庫交互。 性能 通常加載速度較快。 加載速度可能較慢。 安全性 安全風險較低，因為沒有伺服器端代碼和數據庫。 可能存在更高的安全風險，需防範各種攻擊。 部署 可以輕鬆部署在靜態網站托管服務上。 需要支持伺服器端運行和數據庫的托管服務。 互動性 限制於前端技術，缺乏動態交互。 可以實現複雜的用戶交互和動態功能。 例子 個人博客、作品集、公司簡介頁面。 電商網站、社交媒體平台、新聞網站。 接下來會根據上述表格裡提到的特徵提出一些問題，來測試看看是否真的清楚吧 : ) 畫面會隨時間變化的網站是否一定是靜態網站？ A. 是 B. 否 提交答案 function checkAnswer() { var selectedOption = document.querySelector('input[name=\"question1\"]:checked'); var resultText = \"\"; var explanationText = \"\"; if (selectedOption) { var value = selectedOption.value; if (value === \"B\") { resultText = \"正確！\"; explanationText = \"畫面隨時間變化的網站不一定是靜態網站，因為即使畫面變化，只要這些變化是由靜態文件中的 JavaScript 處理的，它仍然是靜態網站。\"; } else { resultText = \"錯誤。\"; explanationText = \"畫面隨時間變化的網站不一定是靜態網站，因為即使畫面變化，只要這些變化是由靜態文件中的 JavaScript 處理的，它仍然是靜態網站。\"; } } else { resultText = \"請選擇一個答案。\"; explanationText = \"\"; } document.getElementById(\"result\").innerText = resultText; document.getElementById(\"explanation\").innerText = explanationText; document.getElementById(\"explanation\").style.display = \"block\"; } 如果網站的內容是由伺服器端的代碼根據用戶請求動態生成的，這樣的網站是靜態網站還是動態網站？ A. 靜態網站 B. 動態網站 提交答案 function checkAnswer1() { var selectedOption = document.querySelector('input[name=\"question1\"]:checked'); var resultText = \"\"; var explanationText = \"\"; if (selectedOption) { var value = selectedOption.value; if (value === \"B\") { resultText = \"正確！\"; explanationText = \"動態網站的內容是由伺服器端的代碼根據用戶請求動態生成的。\"; } else { resultText = \"錯誤。\"; explanationText = \"動態網站的內容是由伺服器端的代碼根據用戶請求動態生成的。\"; } } else { resultText = \"請選擇一個答案。\"; explanationText = \"\"; } document.getElementById(\"result1\").innerText = resultText; document.getElementById(\"explanation1\").innerText = explanationText; document.getElementById(\"explanation1\").style.display = \"block\"; } 如果網站需要伺服器端處理用戶提交的表單數據並存儲到數據庫中，這樣的網站是靜態網站還是動態網站？ A. 靜態網站 B. 動態網站 提交答案 function checkAnswer2() { var selectedOption = document.querySelector('input[name=\"question2\"]:checked'); var resultText = \"\"; var explanationText = \"\"; if (selectedOption) { var value = selectedOption.value; if (value === \"B\") { resultText = \"正確！\"; explanationText = \"動態網站通常需要伺服器端處理用戶提交的數據並進行數據庫操作。\"; } else { resultText = \"錯誤。\"; explanationText = \"動態網站通常需要伺服器端處理用戶提交的數據並進行數據庫操作。\"; } } else { resultText = \"請選擇一個答案。\"; explanationText = \"\"; } document.getElementById(\"result2\").innerText = resultText; document.getElementById(\"explanation2\").innerText = explanationText; document.getElementById(\"explanation2\").style.display = \"block\"; } 通常靜態網站的加載速度比動態網站要快，因為靜態網站不需要進行伺服器端的數據處理。這個說法正確嗎？ A. 是 B. 否 提交答案 function checkAnswer3() { var selectedOption = document.querySelector('input[name=\"question3\"]:checked'); var resultText = \"\"; var explanationText = \"\"; if (selectedOption) { var value = selectedOption.value; if (value === \"A\") { resultText = \"正確！\"; explanationText = \"靜態網站通常加載速度更快，因為內容是預先生成的，伺服器不需要進行計算。\"; } else { resultText = \"錯誤。\"; explanationText = \"靜態網站通常加載速度更快，因為內容是預先生成的，伺服器不需要進行計算。\"; } } else { resultText = \"請選擇一個答案。\"; explanationText = \"\"; } document.getElementById(\"result3\").innerText = resultText; document.getElementById(\"explanation3\").innerText = explanationText; document.getElementById(\"explanation3\").style.display = \"block\"; } 靜態網站由於沒有伺服器端代碼和數據庫，因此通常比動態網站更安全。這個說法正確嗎？ A. 是 B. 否 提交答案 function checkAnswer4() { var selectedOption = document.querySelector('input[name=\"question4\"]:checked'); var resultText = \"\"; var explanationText = \"\"; if (selectedOption) { var value = selectedOption.value; if (value === \"A\") { resultText = \"正確！\"; explanationText = \"靜態網站通常更安全，因為沒有伺服器端代碼和數據庫，不容易受到攻擊。\"; } else { resultText = \"錯誤。\"; explanationText = \"靜態網站通常更安全，因為沒有伺服器端代碼和數據庫，不容易受到攻擊。\"; } } else { resultText = \"請選擇一個答案。\"; explanationText = \"\"; } document.getElementById(\"result4\").innerText = resultText; document.getElementById(\"explanation4\").innerText = explanationText; document.getElementById(\"explanation4\").style.display = \"block\"; } 靜態網站通常可以部署在靜態網站托管服務上，如 GitHub Pages 和 Netlify。這個說法正確嗎？ A. 是 B. 否 提交答案 function checkAnswer5() { var selectedOption = document.querySelector('input[name=\"question5\"]:checked'); var resultText = \"\"; var explanationText = \"\"; if (selectedOption) { var value = selectedOption.value; if (value === \"A\") { resultText = \"正確！\"; explanationText = \"靜態網站可以輕鬆部署在靜態網站托管服務上，如 GitHub Pages 和 Netlify。\"; } else { resultText = \"錯誤。\"; explanationText = \"靜態網站可以輕鬆部署在靜態網站托管服務上，如 GitHub Pages 和 Netlify。\"; } } else { resultText = \"請選擇一個答案。\"; explanationText = \"\"; } document.getElementById(\"result5\").innerText = resultText; document.getElementById(\"explanation5\").innerText = explanationText; document.getElementById(\"explanation5\").style.display = \"block\"; } 靜態網站的互動性通常僅限於前端技術，而無法進行伺服器端的複雜互動。這個說法正確嗎？ A. 是 B. 否 提交答案 function checkAnswer6() { var selectedOption = document.querySelector('input[name=\"question6\"]:checked'); var resultText = \"\"; var explanationText = \"\"; if (selectedOption) { var value = selectedOption.value; if (value === \"A\") { resultText = \"正確！\"; explanationText = \"靜態網站的互動性通常僅限於前端技術，無法進行伺服器端的複雜互動。\"; } else { resultText = \"錯誤。\"; explanationText = \"靜態網站的互動性通常僅限於前端技術，無法進行伺服器端的複雜互動。\"; } } else { resultText = \"請選擇一個答案。\"; explanationText = \"\"; } document.getElementById(\"result6\").innerText = resultText; document.getElementById(\"explanation6\").innerText = explanationText; document.getElementById(\"explanation6\").style.display = \"block\"; } 以下哪一種網站通常被認為是靜態網站？ A. 社交媒體平台 B. 個人博客 提交答案 function checkAnswer7() { var selectedOption = document.querySelector('input[name=\"question7\"]:checked'); var resultText = \"\"; var explanationText = \"\"; if (selectedOption) { var value = selectedOption.value; if (value === \"B\") { resultText = \"正確！\"; explanationText = \"個人博客通常是靜態網站的例子，因為它們通常由靜態文件組成。\"; } else { resultText = \"錯誤。\"; explanationText = \"個人博客通常是靜態網站的例子，因為它們通常由靜態文件組成。\"; } } else { resultText = \"請選擇一個答案。\"; explanationText = \"\"; } document.getElementById(\"result7\").innerText = resultText; document.getElementById(\"explanation7\").innerText = explanationText; document.getElementById(\"explanation7\").style.display = \"block\"; }","link":"/uncategorized/%E3%80%8C%E9%9D%9C%E6%85%8B%E7%B6%B2%E7%AB%99%E3%80%8D%E8%88%87%E3%80%8C%E5%8B%95%E6%85%8B%E7%B6%B2%E7%AB%99%E3%80%8D/"}],"tags":[{"name":"標籤","slug":"標籤","link":"/tags/%E6%A8%99%E7%B1%A4/"},{"name":"github pages","slug":"github-pages","link":"/tags/github-pages/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"github","slug":"github","link":"/tags/github/"},{"name":"Sally–Anne test","slug":"Sally–Anne-test","link":"/tags/Sally%E2%80%93Anne-test/"},{"name":"GPT-4","slug":"GPT-4","link":"/tags/GPT-4/"},{"name":"twentytwenty","slug":"twentytwenty","link":"/tags/twentytwenty/"}],"categories":[{"name":"learning","slug":"learning","link":"/categories/learning/"},{"name":"life","slug":"life","link":"/categories/life/"}],"pages":[{"title":"categories","text":"","link":"/categories/index.html"},{"title":"","text":"(function(){ $(document).ready( function() { initialize_twentytwenty(); } ); function initialize_twentytwenty(){ if($(\".twentytwenty-container\").twentytwenty){ $(\".twentytwenty-container\").twentytwenty(); }else{ setTimeout(function(){ initialize_twentytwenty(); },250); } } })();","link":"/js/twentytwenty.js"}]}